Parameters:
  AmiId:
    Type: AWS::EC2::Image::Id
  TableauBucket:
    Type: String
    Default: tableau-quickstart
  SourceCIDR: to fill in
  SSLCertificateARNInstance:
    Default: ''
    Description: The Amazon Resource Name for the existing SSL cert you wish to use for instance; empty for none
    Type: String
  TableauServerLinuxInstaller: From map 

  Username:
    AllowedPattern: "^(?!(tableau|tsmagent|admin|root)$)[A-Za-z0-9]+$"
    Description: Tableau Services Manager (TSM) administrator username (cannot be 'tableau' or 'tsmagent' or 'admin' or 'root')
    MinLength: 1
    MaxLength: 30
    Type: String

Mappings:
  DefaultConfiguration:
    InstallationConfig:
      TableauServerInstallerOnCentos: https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-server.x86_64.rpm
      TableauServerInstallerOnUbuntu: https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-server_amd64.deb
      AutomatedInstaller: https://s3-us-west-2.amazonaws.com/tableau-quickstart/automated-installer
    MachineConfiguration:
      SystemVolumeSize: 100
Condition:
  HasElasticIP:
  NoServerSecurityGroup:
Resources:
  PrimaryServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/tmp/secrets.properties":
              mode: '640'
              content: !Sub |
                tsm_admin_user='${Username}'
                tsm_admin_pass='${Password}'
                tableau_server_admin_user='${TableauServerAdminUser}'
                tableau_server_admin_pass='${TableauServerAdminPassword}'
            "/tmp/tableau-server":
              source: !If [ IsCentos , !FindInMap [ DefaultConfiguration, InstallationConfig , TableauServerInstallerOnCentos ], !FindInMap [ DefaultConfiguration, InstallationConfig , TableauServerInstallerOnUbuntu ] ]
            "/tmp/automated-installer":
              mode: '550'
              source: !FindInMap [ DefaultConfiguration, InstallationConfig, AutomatedInstaller ]
            "/tmp/workers.sh":
              mode: '550'
              content:
                Fn::If:
                - HasWorkers
                - !Sub |
                  #!/bin/bash -e
                  # Wait for workers
                  sleep 30
                  wait_json=$(aws cloudformation describe-stack-resource --stack-name "${AWS::StackName}" --region "${AWS::Region}" --logical-resource-id WorkerWaitCondition)
                  while [ $(echo $wait_json | jq -r '.StackResourceDetail.ResourceStatus') != 'CREATE_COMPLETE' ]; do
                      sleep 10
                      wait_json=$(aws cloudformation describe-stack-resource --stack-name "${AWS::StackName}" --region "${AWS::Region}" --logical-resource-id WorkerWaitCondition)
                  done
                  sleep 30
                  set_topology() {
                      source '/tmp/secrets.properties'
                      tsm topology list-nodes -u "$tsm_admin_user" -p "$tsm_admin_pass" | while read p; do
                          tsm topology set-process -n "$p" -pr clustercontroller -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                          tsm topology set-process -n "$p" -pr gateway -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                          tsm topology set-process -n "$p" -pr vizportal -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                          tsm topology set-process -n "$p" -pr vizqlserver -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                          tsm topology set-process -n "$p" -pr cacheserver -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                          tsm topology set-process -n "$p" -pr searchserver -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                          tsm topology set-process -n "$p" -pr backgrounder -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                          tsm topology set-process -n "$p" -pr dataserver -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                          tsm topology set-process -n "$p" -pr dataengine -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                          tsm topology set-process -n "$p" -pr filestore -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                      done
                      tsm topology set-process -n node2 -pr pgsql -c 1 -u "$tsm_admin_user" -p "$tsm_admin_pass"
                      tsm pending-changes apply --restart -iw -u "$tsm_admin_user" -p "$tsm_admin_pass"
                      tsm stop -u "$tsm_admin_user" -p "$tsm_admin_pass"
                      tsm topology deploy-coordination-service -n node1,node2,node3  -u "$tsm_admin_user" -p "$tsm_admin_pass"
                      sleep 120
                      tsm topology cleanup-coordination-service -u "$tsm_admin_user" -p "$tsm_admin_pass"
                      tsm start -u "$tsm_admin_user" -p "$tsm_admin_pass"
                  }
                  send_singal_to_topologyWaitHandle() {
                      # Signal successful completion
                      /opt/aws/bin/cfn-signal -e $? '${TopologyWaitHandle}'
                  }
                  set_topology
                  unset -f set_topology
                  trap send_singal_to_topologyWaitHandle EXIT
                - "# No action needed"
            "/tmp/config.json":
              content: !Sub |
                {"configEntities": {
                    "runAsUser": {
                        "_type": "runAsUserType",
                        "name": "${Username}"
                    },
                    "gatewaySettings": {
                        "_type": "gatewaySettingsType",
                        "port": 80, # Port
                        "firewallOpeningEnabled": true,
                        "sslRedirectEnabled": true,
                        "publicHost": "localhost",
                        "publicPort": 80 # Port
                    },
                    "identityStore": {
                         "_type": "identityStoreType",
                         "type": "local"
                    }
                }}
            "/tmp/registration.json":
              content: !Sub |
                {
                  "first_name": "${RegFirstName}",
                  "last_name": "${RegLastName}",
                  "email": "${RegLastName}",
                  "company": "${RegCompany};AWSQuickStart",
                  "title": "${RegTitle}",
                  "department": "${RegDepartment}",
                  "industry": "${RegIndustry}",
                  "phone": "${RegPhone}",
                  "city": "${RegCity}",
                  "state": "${RegState}",
                  "zip": "${RegZip}",
                  "country": "${RegCountry}"
                }
    Properties:
      SubnetId: !Select [ 0 , !Ref PrivateSubnetIds ]
      ImageId: !FindInMap [ AWSAMIRegionMap, !Ref "AWS::Region", !Ref AmiId ]
      InstanceType: !Ref InstanceType
      # Check to make sure existing SG doesn't open port 80?
      SecurityGroupIds: !If [ HasServerSecurityGroup, !Ref ExistingSecurityGroup, !Ref ServerSecurityGroup ]
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref RootInstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: gp2
          VolumeSize: !FindInMap [ DefaultConfiguration, MachineConfiguration, SystemVolumeSize ]
      EbsOptimized: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          if [[ $(ls /etc/*-release) ]]; then OS=$( cat /etc/*-release | grep ^ID= |awk -F= '{print $2}' | tr -cd [:alpha:])
          else
              return 1
          fi
          if [ "$OS" == "ubuntu" ]; then
              apt-get update
              apt-get install -y python-setuptools
              wget https://s3-us-west-2.amazonaws.com/${TableauBucket}/tableau-postgresql-odbc_9.5.3_amd64.deb
              dpkg -i tableau-postgresql-odbc_9.5.3_amd64.deb
              apt-get install awscli -y
              apt-get install jq -y
              apt-get install expect -y
          else
          # Remove hardcoding of tableau bucket?
              rpm -i https://s3-us-west-2.amazonaws.com/${TableauBucket}/tableau-postgresql-odbc-9.5.3-1.x86_64.rpm
              yum install epel-release -y
              yum install awscli -y
              yum install jq -y
              yum install expect -y
          fi
          # Call Init
          /usr/bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-init --stack '${AWS::StackName}' --resource PrimaryServer  --region '${AWS::Region}'
          # Various machine configs
          hostnamectl set-hostname $(hostnamectl --static)
          setup_sftp() {
              source '/tmp/secrets.properties'
              useradd -m "$tsm_admin_user"
              echo -e "$tsm_admin_pass\n$tsm_admin_pass" | passwd "$tsm_admin_user" 
              mkdir /restricted
              chown root:root /restricted
              chmod 551 /restricted
              sed -i.bak -e 's:Subsystem\\s\\+sftp\\s\\+/usr/libexec/openssh/sftp-server:Subsystem sftp  internal-sftp:' /etc/ssh/sshd_config
              printf "\nMatch User $tsm_admin_user\n  ForceCommand internal-sftp\n  ChrootDirectory /restricted\n  PasswordAuthentication yes\n  AllowTcpForwarding no\n  PermitTunnel no\n  X11Forwarding no\n" >>/etc/ssh/sshd_config
              service sshd restart
          }
          setup_sftp
          unset -f setup_sftp
          if [ "$OS" == "ubuntu" ]; then
              export LANG=en_US.UTF-8
              mv /tmp/tableau-server /tmp/tableau-server.deb
          else
              mv /tmp/tableau-server /tmp/tableau-server.rpm
          fi
          # Install Tableau Server
          install() {
              source '/tmp/secrets.properties'
              local license='${TableauServerLicenseKey}'
              local license=$([ "$license" == '''' ] && echo '''' || echo "-k ''$license''")
              /tmp/automated-installer -a $tsm_admin_user -f /tmp/config.json -r /tmp/registration.json -s /tmp/secrets.properties $license -v --accepteula --force /tmp/tableau-server*
              source /etc/profile.d/tableau_server.sh
              tsm topology nodes get-bootstrap-file --file bootstrap.cfg -u "$tsm_admin_user" -p "$tsm_admin_pass"
          }
          install
          unset -f install
          # publish the Primary xml
          mv bootstrap.cfg /restricted/
          # Signal successful completion
          /opt/aws/bin/cfn-signal -e $? --stack '${AWS::StackName}' --resource PrimaryServer --region '${AWS::Region}'
          # Wait for workers
          /tmp/workers.sh
          # Cleanup
          rm -f /tmp/config.json
          rm -f /tmp/registration.json
          rm -f /tmp/secrets.properties
          rm -f /tmp/workers.sh
          rm -f /tmp/tableau-server*
          rm -f /tmp/automated-installer
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-cfn-primary-tableau-server-linux
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Condition: HasElasticIP
    Properties:
      InstanceId: !Ref PrimaryServer
      EIP: !Ref IPAddress
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: NoServerSecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub Enable HTTP access via ports 80 and HTTPS access on port 8850, and
          SSH access from the provided network CIDR, plus all access from within the
          VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80' # Need to remove for HealthcareVersion
        ToPort: '80'
        CidrIp: !Ref SourceCIDR
      - IpProtocol: tcp
        FromPort: '8850'
        ToPort: '8850'
        CidrIp: !Ref SourceCIDR
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SourceCIDR
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt VpcInfo.CidrBlock
  WorkerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Split [ ",", !Join [ ",", [ !Select [ 1, !Ref PrivateSubnetIds ], !Select [ 2, !Ref PrivateSubnetIds ] ] ] ]
      LaunchConfigurationName: !Ref WorkerLaunchConfig
      MinSize: !Ref WorkerCount
      MaxSize: !Ref WorkerCount
      LoadBalancerNames:
      - !Ref ServerLoadBalancer

  WorkerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/tmp/tableau-server":
              source: !Ref TableauServerLinuxInstaller
            "/tmp/automated-installer":
              mode: '550'
              source: !FindInMap [ DefaultConfiguration, InstallationConfig, AutomatedInstaller ]
            "/tmp/secrets.properties":
              mode: '640'
              content: !Sub |
                tsm_admin_user='${Username}'
                tsm_admin_pass='${Password}'
                tableau_server_admin_user='${TableauServerAdminUser}'
                tableau_server_admin_pass='${TableauServerAdminPassword}'
    Properties:
      ImageId: !FindInMap [ AWSAMIRegionMap, !Ref "AWS::Region", !FindInMap [ LinuxAMINameMap, !Ref AMIOS, Code ] ]
      InstanceType: !Ref InstanceType
      SecurityGroups: !If [ HasServerSecurityGroup, !Ref ExistingSecurityGroup, !Ref ServerSecurityGroup ]
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref RootInstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: gp2
          VolumeSize: !FindInMap [ DefaultConfiguration, MachineConfiguration, SystemVolumeSize ]
      EbsOptimized: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          if [[ $(ls /etc/*-release) ]]; then
              OS=$( cat /etc/*-release | grep ^ID= |awk -F= '{print $2}' | tr -cd [:alpha:])
          else
              return 1
          fi
          if [ "$OS" == "ubuntu" ]; then
              apt-get update
              apt-get install -y python-setuptools
              wget https://s3-us-west-2.amazonaws.com/${TableauBucket}/tableau-postgresql-odbc_9.5.3_amd64.deb
              dpkg -i tableau-postgresql-odbc_9.5.3_amd64.deb
              apt-get install awscli -y
              apt-get install jq -y
              apt-get install expect -y
          else
              rpm -i https://s3-us-west-2.amazonaws.com/${TableauBucket}/tableau-postgresql-odbc-9.5.3-1.x86_64.rpm
              yum install epel-release -y
              yum install awscli -y
              yum install jq -y
              yum install expect -y
          fi
          # Call Init
          /usr/bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-init --stack '${AWS::StackName}' --resource WorkerLaunchConfig  --region '${AWS::Region}'
          # Various machine configs
          hostnamectl set-hostname $(hostnamectl --static)
          # Wait for Primary (use a random sleep to split up the requests and avoid throttling)
          sleep $(($(expr $RANDOM % 30) * 3))
          primary_json=$(aws cloudformation describe-stack-resource --stack-name '${AWS::StackName}' --region '${AWS::Region}' --logical-resource-id PrimaryServer)
          while [ $(echo $primary_json | jq -r '.StackResourceDetail.ResourceStatus') != 'CREATE_COMPLETE' ]; do
              sleep 30
              primary_json=$(aws cloudformation describe-stack-resource --stack-name '${AWS::StackName}' --region '${AWS::Region}' --logical-resource-id PrimaryServer)
          done
          primary_id=$(echo $primary_json | jq -r '.StackResourceDetail.PhysicalResourceId')
          primary_config=$(aws ec2 describe-instances --instance-id "$primary_id" --region '${AWS::Region}' | jq -r '.Reservations[0].Instances[0]')
          primary_dns=$(echo $primary_config | jq -r '.PrivateDnsName')
          transfer() {
              source '/tmp/secrets.properties'
              expect -c "spawn sftp -o \"StrictHostKeyChecking no\" \"$tsm_admin_user@$primary_dns\";expect \"password:\";send \"$tsm_admin_pass\n\";expect \"sftp>\";send \"get bootstrap.cfg\n\";expect \"sftp>\";send \"exit\n\";interact"
          }
          transfer
          unset -f transfer
          if [ "$OS" == "ubuntu" ]; then
              export LANG=en_US.UTF-8
              mv /tmp/tableau-server /tmp/tableau-server.deb
          else
              mv /tmp/tableau-server /tmp/tableau-server.rpm
          fi
          # Install Tableau Server
          install() {
              source '/tmp/secrets.properties'
              useradd -m "$tsm_admin_user"
              echo -e "$tsm_admin_pass\n$tsm_admin_pass" | passwd "$tsm_admin_user"
              /tmp/automated-installer -a $tsm_admin_user -f /dev/zero -r /dev/zero -s /tmp/secrets.properties -b bootstrap.cfg -v --accepteula --force /tmp/tableau-server*
          }
          install
          unset -f install
          # Signal successful completion
          /opt/aws/bin/cfn-signal -e $? '${WorkerWaitHandle}'
          # Cleanup
          rm -f /tmp/secrets.properties
          rm -f /tmp/tableau-server*
          rm -f /tmp/automated-installer

Outputs:
  PrimaryServer:
    Value: !Ref PrimaryServer
  # To fill in